React js is a library 
React is a framework that employs Webpack to automatically compile React, JSX, and ES6 code while handling CSS file prefixes. React is a JavaScript-based UI development library. Although React is a library rather than a language, it is widely used in web development. The library first appeared in May 2013 and is now one of the most commonly used frontend libraries for web development.

React offers various extensions for entire application architectural support, such as Flux and React Native, beyond mere UI.

History of React js

When compared to other technologies on the market, React is a new technology. Jordan Walke, a software engineer at Facebook, founded the library in 2011, giving it life.

Why React?
React’s popularity today has eclipsed that of all other front-end development frameworks. Here is why:

1.Easy creation of dynamic applications: React makes it easier to create dynamic web applications because it requires less coding and offers more functionality, as opposed to JavaScript, where coding often gets complex very quickly.
2.Improved performance: React uses Virtual DOM, thereby creating web applications faster. Virtual DOM compares the components’ previous states and updates only the items in the Real DOM that were changed, instead of updating all of the components again, as conventional web applications do. 
3.Reusable components: Components are the building blocks of any React application, and a single app usually consists of multiple components. These components have their logic and controls, and they can be reused throughout the application, which in turn dramatically reduces the application’s development time.
4.Unidirectional data flow: React follows a unidirectional data flow. This means that when designing a React app, developers often nest child components within parent components. Since the data flows in a single direction, it becomes easier to debug errors and know where a problem occurs in an application at the moment in question.
5.Small learning curve: React is easy to learn, as it mostly combines basic HTML and JavaScript concepts with some beneficial additions. Still, as is the case with other tools and frameworks, you have to spend some time to get a proper understanding of React’s library.
6.It can be used for the development of both web and mobile apps: We already know that React is used for the development of web applications, but that’s not all it can do. There is a framework called React Native, derived from React itself, that is hugely popular and is used for creating beautiful mobile applications. So, in reality, React can be used for making both web and mobile applications.
7.Dedicated tools for easy debugging: Facebook has released a Chrome extension that can be used to debug React applications. This makes the process of debugging React web applications faster and easier.

ReactJS Advantages

React.js builds a customized virtual DOM. Because the JavaScript virtual DOM is quicker than the conventional DOM, this will enhance the performance of apps. 
ReactJS makes an amazing UI possible. 
Search - engine friendly ReactJS. 
Modules and valid data make larger apps easier to manage by increasing readability. 
React integrates various architectures. 
React makes the entire scripting environment process simpler. 
It makes advanced maintenance easier and boosts output. 
Guarantees quicker rendering 
The availability of a script for developing mobile apps is the best feature of React.
ReactJS is supported by a large community.

Advantages and Limitations (Pros and Cons)

Advantages
Makes use of the JavaScript structure known as virtual DOM. Since JavaScript's virtual DOM is quicker than the conventional DOM, this will boost the speed of programs. 
Can be used with various systems and on both client and server sides is commendable. 
Components and identify trends make larger apps easier to manage by increasing clarity.


Limitations
Only addresses the app's angle and distance; as a result, additional techniques must be selected if you want a full collection of development tools. 
Employs inline scripting and JSX, which some programmers might find uncomfortable.

React js features :-

It uses virtual dom
code reusability
simple code


Virtual DOM:-
Virtual dom is a duplicate of original dom .it will effect after updating to the actual DOM.

React js :
It is the combination of html and js which is called as jsx (React file extension).

React js structure
step1 :-npx create-react-app folder-structure ---> it is used to create the folder and those folder contain all the files which we require ..
Example -->index.js (it is the main file)
app.js -->it is the main file which contain all files even react run from this file (we can create mutiple pages like hello.js,menu.js,form.js and all we should import those file name in app.js as a import Hello from ./hello.js )
Hello is a function name which we used for function and from means from where we taking that file ..

Step 2: After project folder has been created, go inside the folder using the following command.

cd folder-structure

Step 3: Install the dependencies required for your project (if any) using the following command.

npm i package-name

Step 4: Run the command git-init to initialized the git in the project. This will add .gitignore file.

git init

Step 5: Create a file named Readme.md which will contain all the info of the project.

touch Readme.md
Step 6: Create a file with extension .env which will contain the sensitive information and credentials of the project.

touch process.env
Step 7: Create a file named .gitignore so that all the un-necessary files and folders should not uploaded to github.

touch .gitignore
Step 8: Create folder like components (contains main components) and pages (contains files which combines components to make a page).

mkdir components
touch Navbar.jsx

Improved Files and Folders Structure:
For managing the project in more concise way we can create these folder for more manageable code.

Components Folder
Context Folder
Hooks Folder
Services Folder
Utils Folder
Assets Folder
Config Folder
Styles Folder
folder2
Improved Folder Structure

Giving Style for react js content file----------------------------------
Like css in react js also we have three css types
1) Inline styling
2) CSS stylesheets
3) CSS Modules

example 1 for inline styling css ---------------------------------------------
Inline Styling
To style an element with the inline style attribute, the value must be a JavaScript object:

Example:------------------------------------------------------------------------------------------------------------------
Insert an object with the styling information:

const Header = () => {
  return (
    <>
      <h1 style={{color: "red"}}>Hello Style!</h1>
      <p>Add a little style!</p>
    </>
  );
}

In this exmaple we are using inline css so for inline css in react js we have to use {{.....}} double curly braces..In Recat js is a camel based so we can write object decalration like
backgroundColor:red...


JavaScript Object
You can also create an object with styling information, and refer to it in the style attribute:

Example:--------------------------------------------------------------------------------------------------------------
Create a style object named myStyle:

const Header = () => {
  const myStyle = {
    color: "white",
    backgroundColor: "DodgerBlue",
    padding: "10px",
    fontFamily: "Sans-Serif"
  };
  return (
    <>
      <h1 style={myStyle}>Hello Style!</h1>
      <p>Add a little style!</p>
    </>
  );
}


In this exampe we just javascript object so first we initalisex the object you can use let,var and const and inistilaise the object later use that object refernce in react code ..
when we created object no need of using {{...}} double curly braces .you can initialise in {...} like this..







